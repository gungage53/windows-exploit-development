#!/usr/bin/python2 -V
# coding: Shift_JIS
import sys
import fnmatch
import pykd
from pykd import *

list = []

class MyBpObject():
	def __init__(self, isOneShot):
		self.bp_obj = None
		self.isOneShot = isOneShot
		self.funName = ""
		self.addr = 0
		
	def callBack(self):
		print("-------------------------------------------------------------------------------")
		print("Break:{0:x}\t{1}".format(self.addr, self.funcName))
		print(dbgCommand("r"))
		print(dbgCommand("dda esp"))
		if self.isOneShot == True:
			self.bp_obj.remove()
		return False
		
	def setBreakPoint(self, addr, funcName):
		self.addr = addr
		self.funcName = funcName
		
		#ì‡ïîÇ≈ï€éùÇµÇƒÇ®Ç©Ç»Ç¢Ç∆ÅAè¡Ç≥ÇÍÇÈÅB
		self.bp_obj = pykd.setBp(int(addr), self.callBack)
		
		return

def iat( moduleName, mask = "*" ):

    mod = module( moduleName )
    dprintln( "Module: " + moduleName + " base: %x" % mod.begin() + " end: %x" % mod.end() )

    if isKernelDebugging():
        systemModule = module( "nt" )
    else:
        systemModule = module( "ntdll" )
    

    if is64bitSystem():
        ntHeader = systemModule.typedVar( "_IMAGE_NT_HEADERS64", mod.begin() + ptrDWord( mod.begin() + 0x3c ) )
        if ntHeader.OptionalHeader.Magic == 0x10b:
            systemModule = loadModule( "ntdll32" ) 
            ntHeader = systemModule.typedVar( "_IMAGE_NT_HEADERS", mod.begin() + ptrDWord( mod.begin() + 0x3c ) )
            pSize = 4
        else:
            pSize = 8     
    else:
        ntHeader = systemModule.typedVar(  "_IMAGE_NT_HEADERS", mod.begin() + ptrDWord( mod.begin() + 0x3c ) )
        pSize = 4


    dprintln( "IAT RVA: %x  Size: %x" % ( ntHeader.OptionalHeader.DataDirectory[12].VirtualAddress, ntHeader.OptionalHeader.DataDirectory[12].Size  ) )
    dprintln( "========================" )

    if ntHeader.OptionalHeader.DataDirectory[12].Size == 0:
        return
    
    iatAddr = mod.begin() + ntHeader.OptionalHeader.DataDirectory[12].VirtualAddress;

    for i in range( 0, ntHeader.OptionalHeader.DataDirectory[12].Size / pSize ):

        if ( pSize == 4 ):
            iatEntry = addr64(ptrDWord( iatAddr + i*pSize ))
        else:
            iatEntry = addr64(ptrQWord( iatAddr + i*pSize ))

        if  iatEntry != None and iatEntry != 0:
            symbolName = findSymbol( iatEntry ) 
            if fnmatch.fnmatch( symbolName, mask ): 
                myBp = MyBpObject(True)
                myBp.setBreakPoint(iatEntry, symbolName)
                list.append(myBp)
                #dprintln( "{0:x}\t{1}".format(iatEntry, symbolName) ) 




if __name__ == "__main__":
    if not isWindbgExt():
        print "script is launch out of windbg"
        quit( 0 )

    if len (sys.argv)<=1:
        dprintln( "usage: !py import module_name ( symbol name mask )" )
        quit( 0 )
    elif len( sys.argv ) == 2:
        iat( sys.argv[1] )
    else:
        iat( sys.argv[1], sys.argv[2] )
        
    print("set breakpoint Num={0}".format(pykd.getNumberBreakpoints()))
    pykd.go()

